group 'cn.unsafe'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        mavenCentral()
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/plugins-snapshot/" }
    }
    dependencies {
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE"
    }
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

sourceSets {
    main {
        // Customizing source directories
        proto {
            srcDir "$rootDir/conf/proto"
            srcDir "$projectDir/src/main/proto"
            srcDir "$rootDir/src/main/proto"

            include "**/*.proto"
            include "**/*.protodevel"
        }
    }
    test {
        // Customizing source directories
        proto {
            srcDir "$rootDir/conf/proto"
            srcDir "$projectDir/src/test/proto"
            srcDir "$rootDir/src/test/proto"

            include "**/*.proto"
            include "**/*.protodevel"
        }
    }
}

protobuf {
    // Configure the output basedir
    generatedFilesBaseDir = "$projectDir/src"
    // Configure the protoc executable
    protoc {
        // Download from repositories
        // artifact = 'com.google.protobuf:protoc:3.0.0'
        // Select system executable file
        path = 'D:\\Application\\protobuf\\bin\\protoc.exe'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
                // cpp {} Add cpp output
                // python {} Add python output
            }
        }
    }
}

springBoot {
    layout = "ZIP"
    customConfiguration = 'buildConfigure'
    mainClass = "com.unsafe.gameserver.Application"
}

configurations {
    buildConfigure {
        extendsFrom configurations.runtime
        exclude group: '*'
    }
}

task distDeps(type: Copy, dependsOn: build) {
    from configurations.runtime
    into "$projectDir/libs"
}

task distJar(type: Copy, dependsOn: distDeps) {
    from "$buildDir/libs"
    into "$projectDir/libs"
    include("**/*.jar")
}

repositories {
    mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    mavenCentral()
    maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    jcenter()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("com.zaxxer:HikariCP:2.6.1") {
        exclude(group: 'org.slf4j')
    }
    compile("mysql:mysql-connector-java:5.1.43")
    compile("org.springframework.boot:spring-boot-starter-jdbc") {
        exclude(group: 'org.apache.tomcat')
    }
    compile("io.netty:netty-all:4.0.50.Final")
    compile("com.google.guava:guava:23.0")
    compile("com.google.protobuf:protobuf-java:3.3.0")
    compile("commons-beanutils:commons-beanutils:1.9.3") {
        exclude(group: 'commons-logging')
    }
    compile("commons-codec:commons-codec:1.9")
    compile("commons-dbutils:commons-dbutils:1.7")
    compile("org.apache.commons:commons-collections4:4.1")
    compile("org.apache.commons:commons-lang3:3.6")
    compile("org.apache.commons:commons-pool2:2.4.2")
    compile("org.apache.httpcomponents:httpclient:4.5.3") {
        exclude(group: 'commons-logging')
    }
    optional("org.projectlombok:lombok:1.16.18")
    optional("org.springframework.boot:spring-boot-devtools")
    optional "org.springframework.boot:spring-boot-configuration-processor"

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

compileJava.dependsOn(processResources)
